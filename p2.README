################################################################################

Group info:
agoel5 Anshuman Goel
kgondha Kaustubh G Gondhalekar
ndas Neha Das

################################################################################



Problem Objective: 

Your task is to determine the effect of frequency scaling on the LULESH code's:

A: wall-clock time
B: power consumption
C: stall cycles


Compilation and Execution Instructions:

(Refer to the HW description)


Observations:


Frequency = 800 MHz:

Average Power consumption = 683.3 Watts

Stall Cycle counters (per rank): 

(rank, PAPI_RES_STL, PAPI_STL_ICY)

7 4088507959 91370975
6 3982685543 86296068
5 3888025928 81758297
4 3822403575 75771656
3 3537060873 59171048
2 3523866050 61420421
1 3261138876 49481591
0 3118100642 37559112

Run completed:
   Problem size        =  100
   MPI tasks           =  8
   Iteration count     =  5

Elapsed time = 43.03 (s)

---------------------------------------------------------------------

Frequency = 1000 MHz:

Average Power consumption = 691.1 Watts

Stall Cycle counters (per rank): 

(rank, PAPI_RES_STL, PAPI_STL_ICY)

7 4296995914 86868930
6 4132026695 85683274
5 4084277680 80004666
4 4037970277 75686355
2 3687829730 62482848
3 3725205659 55870267
1 3409261743 47070752
0 3312131532 36615867

Run completed:
   Problem size        =  100
   MPI tasks           =  8
   Iteration count     =  5

Elapsed time = 35.71 (s)

---------------------------------------------------------------------

Frequency = 1200 MHz

Average Power consumption = 698.6 Watts

Stall Cycle counters (per rank): 

(rank, PAPI_RES_STL, PAPI_STL_ICY)

7 4640627211 108424953
6 4577349759 88331218
5 4400537698 87304848
4 4393411606 80688213
3 4105756040 67959425
2 4055440442 66871405
1 3786066536 56213276
0 3647546197 43476202

Run completed:
   Problem size        =  100
   MPI tasks           =  8
   Iteration count     =  5

Elapsed time = 31.58 (s)

---------------------------------------------------------------------

Frequency = 1500MHz:

Average Power consumption = 710.4 Watts

Stall Cycle counters (per rank): 

(rank, PAPI_RES_STL, PAPI_STL_ICY)

7 4789547642 99062999
6 4668389500 88052257
5 4603223904 86745318
4 4523134156 79989540
2 4240547763 73373239
3 4267938290 76039895
1 3914109420 55632206
0 3797363787 42767349

Run completed:
   Problem size        =  100
   MPI tasks           =  8
   Iteration count     =  5

Elapsed time = 25.86 (s)

---------------------------------------------------------------------

Frequency = 2000MHz

Average Power consumption = 729.6 Watts

Stall Cycle counters (per rank): 

(rank, PAPI_RES_STL, PAPI_STL_ICY)

7 5550060621 118903977
6 5445411071 108833290
5 5355499113 103697409
4 5295073029 94495578
2 4919662347 94534029
3 4928273722 76030953
1 4547473380 63277324
0 4314815256 46532742

Run completed:
   Problem size        =  100
   MPI tasks           =  8
   Iteration count     =  5

Elapsed time = 21.66 (s)

---------------------------------------------------------------------

Final statistics (used to plot the graphs)

Frequency     Power      Elapsed Time   PAPI_RES_STL      PAPI_STL_ICY
800 MHz       683.3      43.03          3652723681        67853646
1000 MHz	    691.1	     35.71	        3835712404	      66285370
1.20 GHz	    698.6	     31.58	        4200841936	      74908692
1.50 GHz	    710.4	     25.86	        4350531808	      75207850
2.00 GHz	    729.6	     21.66 	        5044533567	      88288163

---------------------------------------------------------------------

Discussions:

Power:
As frequency is increased, power consumption will increase proportionally as power is directly proportion to f*V^2.
This is also evident from the graph.

Time:
Elapsed time will decrease as frequency increases because there are more cycles executed per second.

PAPI_RES_STL:
As the frequency increases, more cycles are spent in waiting for resource access since the time required to access a particular resource remains constant.

PAPI_STL_ICY:
As the frequency increases, more cycles are spent in waiting on instructions since the instructions too reside in memory whose access latency will remain constant.
